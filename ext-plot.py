from matplotlib import pyplot as plt
import argparse


def create_dict(data_msg_event):
    """
    Function to create actual python dictionary from the string containing dictionary type data.
    :param data_msg_event: dictionary in string format
    :return: dictionary
    """
    # {data=9a 99 99 99 99 99 c9 3f, size=8}
    l1 = data_msg_event.replace('{', '').replace('}', '').split(',')
    data1 = l1[0].replace('data=', '')
    size = l1[1].replace('size=', '').strip()
    dictionary = {'data': data1, 'size': size}
    return dictionary


def plot_data_vs_time(data_list, time_list, type3: str):
    """
      Plots received and sent data vs time in nanoseconds on a single plot.

      Args:
        data_list: A list containing received and sent data (strings in hex format).
        time_list: A list containing corresponding times in nanoseconds.
        :param time_list:
        :param data_list:
        :param type3: fmu type
    """
    received_data = []
    sent_data = []

    for data in data_list:
        if type3 == "dspace":
            if int(data['size']) == 1:
                sent_data.append(data['data'])
            if int(data['size']) == 8:
                received_data.append(data['data'])
        if type3 == "matlab":
            if int(data['size']) == 8:
                sent_data.append(data['data'])
            if int(data['size']) == 1:
                received_data.append(data['data'])

    print('Lengths:')
    print(f'Received data list length: {len(received_data[1:])}')
    print(f'Sent data list length: {len(sent_data)}')
    print(f'Time list length: {len(time_list if type3 == "dspace" else time_list[1:-1])}')

    # Check if data lengths match time list
    # if len(received_data) != len(sent_data) != len(time_list):
    #     raise ValueError("Unequal lengths in data lists and time list.")

    plt.figure(figsize=(10, 6))  # Adjust figure size as needed
    try:
        plt.plot(time_list, received_data[1:], label="Received Data", marker='o')
    except Exception as e:
        print("Received data not found: ", e)

    plt.plot(time_list if type3 == "dspace" else time_list[1:-1], sent_data, label="Sent Data", marker='s')

    plt.xlabel("Time (ns)")
    plt.ylabel("Data Value")
    plt.title("Received and Sent Data vs Time" if type3 == "dspace" else "Sent Data vs Time")
    plt.legend()
    plt.xticks(rotation=80)
    plt.grid(True)
    plt.show()


class Extractor:
    def __init__(self, path: str, type2: str):
        """
        Executor constructor to initialize the lines list from the file given in path
        :param path: file path
        """
        self.lines = []
        self.data = dict()
        self.time_list = []
        self.data_list = []
        self.type = "dspace" if type2 is None else type2
        with open(path, "r") as log_file:
            for line in log_file:
                self.lines.append(line)

    def extract_data(self):
        """
        To extract data and time fields from the file
        :return: dictionary
        """
        self._process_lines_()
        self.data['data'] = self.data_list
        self.data['time'] = self.time_list
        return self.data

    def _process_lines_(self):
        """
        To process lines from file one by one and extract the required data from lines
         This will create two lists for data and time respectively
        :return: None
        """
        for line in self.lines:
            is_payload = str(line).find('payload')
            is_data_msg_event = str(line).find('PubSub::DataMessageEvent')
            if is_data_msg_event != -1:
                try:
                    data_msg_event = str(line).split('PubSub::DataMessageEvent')[1]
                    data_dict = create_dict(data_msg_event)
                    self.data_list.append(data_dict)
                except Exception as exception:
                    print(exception)
            if is_payload != -1:
                try:
                    payload = line.split('payload')[1]
                    new_payload = str(payload).replace('=', "").replace('"', '').replace("}", "")
                    time_in_ns = int(new_payload.split('time')[1].strip().split(' ')[-1])
                    if time_in_ns >= 0 and self.time_list.count(str(time_in_ns)) < 1:
                        self.time_list.append(str(time_in_ns))
                except Exception as exception:
                    print(exception)
        print(self.time_list)
        print(self.data_list)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="SilKit FMU Data Plotter:\n"
                                                 + "\n"
                                                 + "This script extracts data from log files generated by SilKit "
                                                   "FMUs. It supports both dSPACE and MATLAB formats.\n"
                                                 + "\n"
                                                 + "- Specify the log file path as an argument.\n"
                                                 + "- The type of FMU is automatically detected as 'dspace' by "
                                                   "default.\n"
                                                 + "- If the log file originates from a MATLAB FMU, use the '--type' "
                                                   "option to explicitly specify 'matlab'.")

    parser.add_argument("-f", "--file_path", type=str, required=True,
                        help="Path to the log's file")
    parser.add_argument("-t", "--type", type=str, required=False,
                        help="Type of the FMU. Available FMU's [dspace, matlab]")

    args = parser.parse_args()

    file_path = args.file_path
    type1 = args.type
    if file_path:
        # Use the file_path here
        print(f"Received file path: {file_path}")
        executor = Extractor(file_path, type1)
        data2 = executor.extract_data()
        plot_data_vs_time(data2['data'], data2['time'], executor.type)
